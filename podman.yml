# Podman Customizations
- hosts: localhost
  connection: local
  become: true
  tasks:
  - name: Ensure directory
    file:
      path: /etc/systemd/user/
      owner: root
      group: root
      mode: "0755"
      state: directory

  - name: Add the docker-podman-proxy.service
    copy:
      content: |
        [Unit]
        Requires=podman.socket
        After=podman.socket
        Requires=docker-podman-proxy.socket
        After=docker-podman-proxy.socket

        [Service]
        Type=notify
        ExecStart=/usr/lib/systemd/systemd-socket-proxyd %t/podman/podman.sock
      dest: /etc/systemd/user/docker-podman-proxy.service
      owner: root
      group: root
      mode: "0644"

  - name: Add the docker-podman-proxy.socket
    copy:
      content: |
        [Unit]
        Description=Docker API Proxy to Podman

        [Socket]
        ListenStream=%t/docker.sock

        [Install]
        WantedBy=sockets.target

      dest: /etc/systemd/user/docker-podman-proxy.socket
      owner: root
      group: root
      mode: "0644"

  - name: Configure unqualified search registries
    copy:
      dest: /etc/containers/registries.conf.d/unqualified-search-registries.conf
      content: |
        # ANSIBLE MANAGED
        unqualified-search-registries = ["docker.io"]
      owner: root
      group: root
      mode: "0644"

  - name: Setup common registry mirrors
    copy:
      dest: /etc/containers/registries.conf.d/mirrors.conf
      content: |
        # ANSIBLE MANAGED
        {% for item in registries %}
        [[registry]]
        location = "{{item}}"
        [[registry.mirror]]
        location = "registry-mirror.{{network.domain}}/{{item}}"
        {% endfor %}
      owner: root
      group: root
      mode: "0644"
    vars:
      registries:
      - docker.io
      - gcr.io
      - ghcr.io
      - quay.io
      - registry.opensuse.org
      - registry.suse.org
      - registry.access.redhat.com
  
  - name: Configure default settings
    stat:
      path: /etc/containers/containers.conf
    register: podman_containers_conf

  - name: Configure containers.conf file
    copy:
      dest: /etc/containers/containers.conf
      src: /usr/share/containers/containers.conf
      remote_src: true
    when: podman_containers_conf.stat.exists == false
  
  - name: Set network backend to aardvark
    lineinfile:
      path: /etc/containers/containers.conf
      line: network_backend = "netavark"
      regexp: '#?network_backend'
      insertafter: '\[network\]'