---
# Configure libvirt
- hosts: localhost
  connection: local
  become: true
  tasks:
  - name: install
    package:
      name:
      - qemu-system
      - qemu-user
      - qemu-utils
      - qemu-system-gui  # Needed for GL passthrough to work
      #- qemu-system-modules-spice
      #- qemu-system-modules-opengl
      - qemu-block-extra
      - libvirt-daemon
      - libvirt-clients
      - virt-manager
      - virt-viewer
      - ksmtuned
      - numad
      - libnss-libvirt
      state: latest

  - name: ensure libvirt is injected into nsswitch.conf
    slurp:
      path: /etc/nsswitch.conf
    register: nsswitch_conf
    changed_when: false

  - set_fact:
      nsswitch_conf_hosts: |-
        {%- set hosts = [] -%}
        {%- for line in (nsswitch_conf.content|b64decode).split("\n") -%}
          {%- if line.startswith("hosts:") -%}
            {%- for part in line.split() if part != "hosts:" -%}
              {%- do hosts.append(part) -%}
            {%- endfor -%}
          {%- endif -%}
        {%- endfor -%}
        {%- set files_pos = 1 -%}
        {%- for part in hosts -%}
          {%- if part == "files" -%}
            {% set files_pos = loop.counter0 %}
          {%- endif -%}
        {%- endfor -%}
        {%- if "libvirt" not in hosts -%}
          {%- do hosts.insert(files_pos, "libvirt") -%}
        {%- endif -%}
        {%- if "libvirt_guest" not in hosts -%}
          {%- do hosts.insert(files_pos+1, "libvirt_guest") -%}
        {%- endif -%}
        {{hosts|join(" ")}}

  - name: update nsswitch.conf hosts line
    lineinfile:
      backrefs: true
      regexp: '^hosts:(\s+).*'
      line: 'hosts:\1{{nsswitch_conf_hosts}}'
      path: /etc/nsswitch.conf

  - name: Define the intended XML
    set_fact:
      intended_default_xml: |
        <network xmlns:dnsmasq='http://libvirt.org/schemas/network/dnsmasq/1.0'>
          <name>default</name>
          <forward mode='nat'/>
          <bridge name='virbr0' stp='on' delay='0'/>
          <mac address='{{ "52:54:00" | random_mac }}'/>
          <domain name='default.libvirt' localOnly='yes'/>
          <ip address='{{ network.vm_network | ipaddr("address") }}' netmask='{{ network.vm_network | ipaddr("netmask") }}'>
            <dhcp>
              <range start='{{ network.vm_network | ipaddr("next_usable") }}' end='{{ network.vm_network | ipaddr("last_usable") }}'/>
            </dhcp>
          </ip>
          <dnsmasq:options>
            <dnsmasq:option value='server=/default.libvirt/192.168.122.2'/>
          </dnsmasq:options>
        </network>

  - name: Get the existing XML
    command: virsh net-dumpxml default
    register: existing_default_xml
    changed_when: false
    failed_when: false

  - name: Edit the network if needed
    block:
    - tempfile:
      register: existing_temp_file
      changed_when: false

    - tempfile:
      register: intended_temp_file
      changed_when: false

    - copy:
        content: '{{ existing_default_xml.stdout }}'
        dest: "{{existing_temp_file.path}}"
      changed_when: false

    - copy:
        content: '{{ intended_default_xml }}'
        dest: "{{intended_temp_file.path}}"
      changed_when: false

    - name: extract the UUID of the network
      xml:
        path: "{{ existing_temp_file.path}}"
        xpath: '//network/uuid'
        content: text
      register: existing_network_uuid
      changed_when: false

    - name: inject the UUID into the network
      xml:
        path: "{{ intended_temp_file.path}}"
        xpath: '//network'
        add_children: "{{existing_network_uuid.matches}}"
      register: existing_network_uuid
      changed_when: false

    - name: Update the network
      command: virsh net-define --file {{intended_temp_file.path}} --validate
    always:
    - file:
        path: "{{item}}"
        state: absent
      loop:
      - "{{existing_temp_file.path}}"
      - "{{intended_temp_file.path}}"
      changed_when: false
    when: query("normalize_xml", existing_default_xml.stdout, remove="//network/uuid")[0] != query("normalize_xml", intended_default_xml, remove="//network/uuid")[0]


  - name: ensure resolved.conf.d exists
    file:
      path: /etc/systemd/resolved.conf.d
      owner: root
      group: root
      mode: "0755"
      state: directory

  - name: setup libvirt redirect
    copy:
      dest: /etc/systemd/resolved.conf.d/libvirt-redirect.conf
      content: |
        [Resolve]
        DNS={{ network.vm_network | ipaddr("address") }}%virbr0#default.libvirt
      owner: root
      group: root
      mode: "0644"

  - name: ensure resolved.conf.d exists
    file:
      path: /etc/qemu
      owner: root
      group: root
      mode: "0755"
      state: directory

  # TODO: apt settings to persist the bridge helper
  - name: setup bridge helper
    copy:
      dest: /etc/qemu/bridge.conf
      content: |
        allow virbr0
      owner: root
      group: root
      mode: "0644"

  - name: ensure bridge helper is setuid
    shell: chmod u+s /usr/lib/qemu/qemu-bridge-helper